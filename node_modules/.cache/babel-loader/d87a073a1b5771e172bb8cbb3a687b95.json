{"ast":null,"code":"var _jsxFileName = \"/Users/hackintosh3/Downloads/themeforest-KKCr05Sa-educhamp-education-react-template/package/src/StudentDashboard/src/components/Tasks/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\"; // @material-ui/icons\n\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"../../assets/jss/material-dashboard-react/components/tasksStyle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(styles);\nexport default function Tasks(props) {\n  _s();\n\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([...props.checkedIndexes]);\n\n  const handleToggle = value => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const {\n    tasksIndexes,\n    tasks,\n    rtlActive\n  } = props;\n  const tableCellClasses = classnames(classes.tableCell, {\n    [classes.tableCellRTL]: rtlActive\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    className: classes.table,\n    children: /*#__PURE__*/_jsxDEV(TableBody, {\n      children: tasksIndexes.map(value => /*#__PURE__*/_jsxDEV(TableRow, {\n        className: classes.tableRow,\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          className: tableCellClasses,\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: checked.indexOf(value) !== -1,\n            tabIndex: -1,\n            onClick: () => handleToggle(value),\n            checkedIcon: /*#__PURE__*/_jsxDEV(Check, {\n              className: classes.checkedIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 30\n            }, this),\n            icon: /*#__PURE__*/_jsxDEV(Check, {\n              className: classes.uncheckedIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 23\n            }, this),\n            classes: {\n              checked: classes.checked,\n              root: classes.root\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          className: tableCellClasses,\n          children: tasks[value]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          className: classes.tableActions,\n          children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n            id: \"tooltip-top\",\n            title: \"Edit Task\",\n            placement: \"top\",\n            classes: {\n              tooltip: classes.tooltip\n            },\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Edit\",\n              className: classes.tableActionButton,\n              children: /*#__PURE__*/_jsxDEV(Edit, {\n                className: classes.tableActionButtonIcon + \" \" + classes.edit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            id: \"tooltip-top-start\",\n            title: \"Remove\",\n            placement: \"top\",\n            classes: {\n              tooltip: classes.tooltip\n            },\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Close\",\n              className: classes.tableActionButton,\n              children: /*#__PURE__*/_jsxDEV(Close, {\n                className: classes.tableActionButtonIcon + \" \" + classes.close\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tasks, \"IH4SyxzfqB6ypr1aoOwA/SGP/qQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Tasks;\nTasks.propTypes = {\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\n  tasks: PropTypes.arrayOf(PropTypes.node),\n  rtlActive: PropTypes.bool,\n  checkedIndexes: PropTypes.array\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/Users/hackintosh3/Downloads/themeforest-KKCr05Sa-educhamp-education-react-template/package/src/StudentDashboard/src/components/Tasks/Tasks.js"],"names":["React","PropTypes","classnames","makeStyles","Checkbox","Tooltip","IconButton","Table","TableRow","TableBody","TableCell","Edit","Close","Check","styles","useStyles","Tasks","props","classes","checked","setChecked","useState","checkedIndexes","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","tasksIndexes","tasks","rtlActive","tableCellClasses","tableCell","tableCellRTL","table","map","tableRow","checkedIcon","uncheckedIcon","root","tableActions","tooltip","tableActionButton","tableActionButtonIcon","edit","close","propTypes","arrayOf","number","node","bool","array"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\n// @material-ui/icons\nimport Edit from \"@material-ui/icons/Edit\";\nimport Close from \"@material-ui/icons/Close\";\nimport Check from \"@material-ui/icons/Check\";\n// core components\nimport styles from \"../../assets/jss/material-dashboard-react/components/tasksStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function Tasks(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([...props.checkedIndexes]);\n  const handleToggle = (value) => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n  const { tasksIndexes, tasks, rtlActive } = props;\n  const tableCellClasses = classnames(classes.tableCell, {\n    [classes.tableCellRTL]: rtlActive,\n  });\n  return (\n    <Table className={classes.table}>\n      <TableBody>\n        {tasksIndexes.map((value) => (\n          <TableRow key={value} className={classes.tableRow}>\n            <TableCell className={tableCellClasses}>\n              <Checkbox\n                checked={checked.indexOf(value) !== -1}\n                tabIndex={-1}\n                onClick={() => handleToggle(value)}\n                checkedIcon={<Check className={classes.checkedIcon} />}\n                icon={<Check className={classes.uncheckedIcon} />}\n                classes={{\n                  checked: classes.checked,\n                  root: classes.root,\n                }}\n              />\n            </TableCell>\n            <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>\n            <TableCell className={classes.tableActions}>\n              <Tooltip\n                id=\"tooltip-top\"\n                title=\"Edit Task\"\n                placement=\"top\"\n                classes={{ tooltip: classes.tooltip }}\n              >\n                <IconButton\n                  aria-label=\"Edit\"\n                  className={classes.tableActionButton}\n                >\n                  <Edit\n                    className={\n                      classes.tableActionButtonIcon + \" \" + classes.edit\n                    }\n                  />\n                </IconButton>\n              </Tooltip>\n              <Tooltip\n                id=\"tooltip-top-start\"\n                title=\"Remove\"\n                placement=\"top\"\n                classes={{ tooltip: classes.tooltip }}\n              >\n                <IconButton\n                  aria-label=\"Close\"\n                  className={classes.tableActionButton}\n                >\n                  <Close\n                    className={\n                      classes.tableActionButtonIcon + \" \" + classes.close\n                    }\n                  />\n                </IconButton>\n              </Tooltip>\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nTasks.propTypes = {\n  tasksIndexes: PropTypes.arrayOf(PropTypes.number),\n  tasks: PropTypes.arrayOf(PropTypes.node),\n  rtlActive: PropTypes.bool,\n  checkedIndexes: PropTypes.array,\n};\n"]},"metadata":{},"sourceType":"module"}